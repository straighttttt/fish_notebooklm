This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-02T03:44:21.623Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.gitignore
backend/app.py
backend/fishaudio/create.py
backend/fishaudio/use.py
frontend/.gitignore
frontend/package.json
frontend/public/index.html
frontend/public/manifest.json
frontend/public/robots.txt
frontend/README.md
frontend/src/App.css
frontend/src/App.js
frontend/src/App.test.js
frontend/src/index.css
frontend/src/index.js
frontend/src/logo.svg
frontend/src/reportWebVitals.js
frontend/src/setupTests.js
frontend/tailwind.config.js
readme
repopack.config.json
requirement.txt

================================================================
Repository Files
================================================================

================
File: .gitignore
================
# 依赖目录
node_modules/

# 构建输出
build/
dist/

# 环境文件
.env
.env.local
.env.*.local

# 日志文件
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# 编辑器目录和文件
.vscode/
.idea/
*.swp
*.swo

# 操作系统生成的文件
.DS_Store
Thumbs.db

# 测试覆盖率报告
coverage/

# 临时文件
*.log
*.tmp

# React 特定文件 (如果不在 frontend/.gitignore 中)
/frontend/.pnp
/frontend/.pnp.js
/frontend/coverage
/frontend/build

# 其他可能需要忽略的文件或目录

================
File: backend/app.py
================
import concurrent.futures as cf
import io
import os
from pathlib import Path
from tempfile import NamedTemporaryFile
from typing import List, Literal
from dotenv import load_dotenv
from loguru import logger
from openai import OpenAI
from promptic import llm
from pydantic import BaseModel, ValidationError
from pypdf import PdfReader
from tenacity import retry, retry_if_exception_type
from fishaudio.use import text_to_speech as fish_tts
from flask import Flask, request, jsonify, send_file
from flask_cors import CORS
from werkzeug.utils import secure_filename
import traceback
import re
import time

os.environ['HTTPS_PROXY'] = 'http://127.0.0.1:7890'

# 加载 .env 文件
load_dotenv()

# 获取 API 密钥
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
FISH_AUDIO_API_KEY = os.getenv("FISH_AUDIO_API_KEY")

if not FISH_AUDIO_API_KEY:
    logger.warning("Fish Audio API key 未在环境变量中设置")

# 定义 Fish Audio 模型
FISH_AUDIO_MODELS = {
    "zhou": "d8cb9a2a89844babbeeda24c974a0af2",
    "dong": "22436dbbbfe94e0bb4e137725d16c8c2",
    "xing": "07ea9673918042debb4080f4efdc2da3",
    "yang": "afb76b7abffd48c49bed68cc01054fab"
}

app = Flask(__name__)
CORS(app)

UPLOAD_FOLDER = './uploads'
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

def get_fish_audio(text: str, model_id: str) -> bytes:
    if not FISH_AUDIO_API_KEY:
        raise ValueError("Fish Audio API key 未设置")
    return fish_tts(text, model_id, api_key=FISH_AUDIO_API_KEY)

def read_readme():
    readme_path = Path("README.md")
    if readme_path.exists():
        with open(readme_path, "r") as file:
            content = file.read()
            content = re.sub(r'--.*?--', '', content, flags=re.DOTALL)
            return content
    else:
        return "README.md not found. Please check the repository for more information."

INSTRUCTION_TEMPLATES = {
"podcast (Chinese)": {
"intro": """你的任务是将提供的输入文本转变为一个深度、引人入胜、信息丰富的播客对话，风格类似NPR，但更加深入和具体。输入文本可能来自各种来源，可能是未经整理的或非结构化的。
你的目标是提取关键点，识别定义和可能在播客中深入讨论的有趣事实。要善于使用具体例子和类比来解释抽象或复杂的概念，使其易于理解。
为广泛的听众仔细定义所有使用的术语，并提供深入的解释和背景信息。
""",
"text_instructions": "首先，仔细阅读输入文本，识别主要话题、关键点和任何有趣的事实或轶事。思考如何以一种深入且引人入胜的方式呈现这些信息，适合高质量的呈现。特别注意可能需要更详细解释或具体例子的复杂概念。",
"scratch_pad": """集思广益，想出一些讨论你在输入文本中识别到的主要话题和关键点的创新方式。考虑使用丰富的类比、具体的实际例子、引人入胜的故事或假设场景，让内容对听众更具相关性和吸引力。
对于每个关键概念，至少构思2-3个具体的例子或类比，以帮助听众更好地理解。这些例子应该涵盖不同的角度，以照顾到不同背景的听众。
虽然你的播客应面向普通大众，但不要害怕深入探讨复杂的主题。相反，要善于用简单的语言和生动的例子来解释复杂的概念。考虑如何将抽象的想法与日常生活联系起来。
利用你的想象力填补输入文本中的任何空白，或提出一些值得深入探讨的发人深省的问题。目标是创造一个既有深度又引人入胜的对话，因此在方法上要富有创意和洞察力。
明确地定义所有使用的术语，并花时间解释其背景和重要性。考虑这些概念如何与更广泛的主题或当前事件联系起来。
在这里写下你的头脑风暴想法和播客对话的详细大纲。务必记录你想在结尾重复的关键见解和收获，以及你打算用来解释这些见解的具体例子。
确保让它既有深度又令人兴奋，能够激发听众的思考和讨论。
""",
"prelude": """现在你已经进行了深入的头脑风暴并创建了一个详细大纲，是时候编写实际的播客对话了。目标是创造一个既有深度又自然流畅的对话。结合你头脑风暴中的最佳想法和例子，确保以简单易懂yet深入的方式解释复杂的主题。
""",
"dialog": """在这里写下一个非常长、深入且引人入胜的播客对话，基于你在头脑风暴会议中提出的关键点、创意和具体例子。使用自然的对话语气，并包含必要的上下文、解释和例子，使复杂的内容易于普通听众理解。
不要为主持人和嘉宾使用虚构的名字，而是让听众体验一个深入且沉浸式的经历。不要包括像[主持人]或[嘉宾]这样的占位符。设计你的输出以供大声朗读——它将被直接转换为音频。
使对话尽可能长且详细，同时保持在主题上并维持引人入胜的流畅性。对于每个关键概念，至少使用2-3个具体的例子或类比来解释。这些例子应该是多样化的，以适应不同背景的听众。
不要害怕深入探讨复杂的主题。相反，要善于用简单的语言和生动的例子来解释复杂的概念。考虑如何将抽象的想法与日常生活联系起来，使用听众熟悉的情景来阐述深奥的概念。
在讨论过程中，主持人和嘉宾应该提出思考性的问题，并探讨这些概念更广泛的影响和应用。鼓励听众思考这些想法如何与他们的生活或更大的社会问题相关联。
充分利用你的输出能力，创造尽可能长的播客节目，同时以深入且有趣的方式传达输入文本中的关键信息。
在对话的最后，主持人和嘉宾应自然总结他们讨论的主要见解和收获。这应从对话中自然流出，以随意、对话的方式重复关键点。避免显得像是显而易见的总结——目标是在结束前最后一次加强核心思想，同时提供一些具体的行动建议或进一步思考的方向。
播客应约有30,000字，以确保有足够的篇幅深入探讨主题。
""",
},
}

STANDARD_TEXT_MODELS = [
    "gpt-4o-mini",
     "gpt-4o",
    "o1-preview",
    "o1-mini",

]

STANDARD_AUDIO_MODELS = [
    "tts-1",
    "tts-1-hd",
]

STANDARD_VOICES = [
    "alloy",
    "echo",
    "fable",
    "onyx",
    "nova",
    "shimmer",
]

class DialogueItem(BaseModel):
    text: str
    speaker: Literal["speaker-1", "speaker-2"]

class Dialogue(BaseModel):
    scratchpad: str
    dialogue: List[DialogueItem]

def get_mp3(text: str, voice: str, audio_model: str, api_key: str = None) -> bytes:
    client = OpenAI(
        api_key=api_key or os.getenv("OPENAI_API_KEY"),
    )

    with client.audio.speech.with_streaming_response.create(
        model=audio_model,
        voice=voice,
        input=text,
    ) as response:
        with io.BytesIO() as file:
            for chunk in response.iter_bytes():
                file.write(chunk)
            return file.getvalue()

from functools import wraps

def conditional_llm(model, api_base=None, api_key=None):
    def decorator(func):
        if api_base:
            return llm(model=model, api_base=api_base)(func)
        else:
            return llm(model=model, api_key=api_key)(func)
    return decorator

def generate_audio(
    pdf_files: list,
    text_model: str = "gpt-4o-mini",
    audio_model: str = "tts-1",
    speaker_1_voice: str = "alloy",
    speaker_2_voice: str = "echo",
    fish_speaker_1: str = "xing",
    fish_speaker_2: str = "dong",
    api_base: str = None,
    debug: bool = False,
    use_fish_audio: bool = False,
) -> tuple:
    logger.info("开始生成音频")
    start_time = time.time()

    # 从环境变量获取 API 密钥
    openai_api_key = os.getenv("OPENAI_API_KEY")
    if not openai_api_key:
        raise ValueError("OpenAI API key is not set in environment variables")

    combined_text = ""
    logger.info("开始读取PDF文件")
    for file in pdf_files:
        with Path(file).open("rb") as f:
            reader = PdfReader(f)
            text = "\n\n".join([page.extract_text() for page in reader.pages if page.extract_text()])
            combined_text += text + "\n\n"
    logger.info(f"PDF文件读取完成，共{len(combined_text)}个字符")

    template = INSTRUCTION_TEMPLATES["podcast (Chinese)"]

    @retry(retry=retry_if_exception_type(ValidationError))
    @conditional_llm(model=text_model, api_base=api_base, api_key=openai_api_key)
    def generate_dialogue(text: str, intro_instructions: str, text_instructions: str, scratch_pad_instructions: str, 
                          prelude_dialog: str, podcast_dialog_instructions: str) -> Dialogue:
        """
        {intro_instructions}
        
        Here is the original input text:
        
        <input_text>
        {text}
        </input_text>

        {text_instructions}
        
        <scratchpad>
        {scratch_pad_instructions}
        </scratchpad>
        
        {prelude_dialog}
        
        <podcast_dialogue>
        {podcast_dialog_instructions}
        </podcast_dialogue>
        """

    logger.info(f"开始生成对话，使用模型：{text_model}")
    dialogue_start_time = time.time()
    llm_output = generate_dialogue(
        combined_text,
        intro_instructions=template["intro"],
        text_instructions=template["text_instructions"],
        scratch_pad_instructions=template["scratch_pad"],
        prelude_dialog=template["prelude"],
        podcast_dialog_instructions=template["dialog"]
    )
    logger.info(f"对话生成完成，耗时：{time.time() - dialogue_start_time:.2f}秒")

    audio = b""
    transcript = ""
    characters = 0

    logger.info("开始生成音频")
    audio_start_time = time.time()
    with cf.ThreadPoolExecutor() as executor:
        futures = []
        for line in llm_output.dialogue:
            transcript_line = f"{line.speaker}: {line.text}"
            if use_fish_audio:
                voice = FISH_AUDIO_MODELS[fish_speaker_1] if line.speaker == "speaker-1" else FISH_AUDIO_MODELS[fish_speaker_2]
                future = executor.submit(get_fish_audio, line.text, voice)
            else:
                voice = speaker_1_voice if line.speaker == "speaker-1" else speaker_2_voice
                future = executor.submit(get_mp3, line.text, voice, audio_model, openai_api_key)
            futures.append((future, transcript_line))
            characters += len(line.text)

        for i, (future, transcript_line) in enumerate(futures):
            logger.info(f"开始处理音频段 {i+1}/{len(futures)}, 文本长度: {len(line.text)}")
            try:
                audio_chunk = future.result()
                logger.info(f"音频段 {i+1} 处理成功")
            except Exception as e:
                logger.error(f"处理音频段 {i+1} 时出错: {str(e)}")
                raise
            audio += audio_chunk
            transcript += transcript_line + "\n\n"

    logger.info(f"音频生成完成，耗时：{time.time() - audio_start_time:.2f}秒")
    logger.info(f"生成了{characters}个字符的音频")

    temporary_directory = "./tmp/"
    os.makedirs(temporary_directory, exist_ok=True)

    temporary_file = NamedTemporaryFile(
        dir=temporary_directory,
        delete=False,
        suffix=".mp3",
    )
    temporary_file.write(audio)
    temporary_file.close()

    logger.info(f"音频文件已保存：{temporary_file.name}")
    logger.info(f"总耗时：{time.time() - start_time:.2f}秒")

    return temporary_file.name, transcript, combined_text

@app.route('/api/convert', methods=['POST'])
def convert():
    if 'file' not in request.files:
        return jsonify({'error': '没有文件部分'}), 400
    file = request.files['file']
    if file.filename == '':
        return jsonify({'error': '没有选择文件'}), 400
    if file:
        filename = secure_filename(file.filename)
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(file_path)

        text_model = request.form.get('text_model', 'o1-preview-2024-09-12')
        audio_model = request.form.get('audio_model', 'tts-1')
        speaker_1_voice = request.form.get('speaker_1_voice', 'alloy')
        speaker_2_voice = request.form.get('speaker_2_voice', 'echo')
        use_fish_audio = request.form.get('use_fish_audio', 'false').lower() == 'true'
        fish_speaker_1 = request.form.get('fish_speaker_1', 'zhou')
        fish_speaker_2 = request.form.get('fish_speaker_2', 'dong')

        try:
            audio_file, transcript, _ = generate_audio(
                [file_path],
                text_model=text_model,
                audio_model=audio_model,
                speaker_1_voice=speaker_1_voice,
                speaker_2_voice=speaker_2_voice,
                fish_speaker_1=fish_speaker_1,
                fish_speaker_2=fish_speaker_2,
                use_fish_audio=use_fish_audio
            )
            return jsonify({'success': True, 'transcript': transcript, 'audio_file': audio_file})
        except Exception as e:
            logger.error(f"转换过程中出错：{str(e)}")
            logger.error(traceback.format_exc())
            return jsonify({'error': str(e), 'traceback': traceback.format_exc()}), 500

@app.route('/api/download', methods=['GET'])
def download():
    audio_file = request.args.get('file')
    if not audio_file:
        return jsonify({'error': '没有指定文件'}), 400
    return send_file(audio_file, as_attachment=True)

@app.route('/')
def index():
    return app.send_static_file('index.html')

if __name__ == '__main__':
    app.run(debug=True)

================
File: backend/fishaudio/create.py
================
import requests
import json
import os   

API_TOKEN = os.getenv("FISH_API_TOKEN")
API_URL = "https://api.fish.audio"

def create_model(title, voice_file_path, text):
    url = f"{API_URL}/model"
    
    headers = {
        "Authorization": f"Bearer {API_TOKEN}"
    }
    
    data = {
        "visibility": "unlist",  # 改为 unlist 以避免需要封面图片
        "type": "tts",
        "title": title,
        "train_mode": "fast"
    }
    

    files = {
        "voices": open(voice_file_path, "rb"),
        "texts": (None, text)
    }
    
    response = requests.post(url, headers=headers, data=data, files=files)
    
    if response.status_code == 201:
        return response.json()["_id"]
    else:
        print(f"错误: {response.status_code}")
        print(response.text)
        return None

# 使用示例
model_id = create_model("zhou", "D:\\pdf-to-podcast\\model-wav\\yang.wav", 
                        "我觉得对于我来说的未来就是比如说你更有想要去做的事情了并且这些事情你有努力的方向和目标了你也知道该怎么去做了以及对于自己你说接系也好或者是待人处事也好或者人与人的关系也好你会有更深刻的不能说是更深刻吧我觉得是有一些更新的理解人与人的关系也好你会有更深刻的不能说是更深刻吧我觉得是有一些更新的理解")
print(f"创建的模型ID: {model_id}")

================
File: backend/fishaudio/use.py
================
import requests
import json

def text_to_speech(text, model_id, api_key):
    url = "https://api.fish.audio/v1/tts"
    
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    
    data = {
        "text": text,
        "reference_id": model_id
    }
    
    response = requests.post(url, headers=headers, data=json.dumps(data))
    
    if response.status_code == 200:
        return response.content
    else:
        raise Exception(f"Error: {response.status_code} - {response.text}")

# 移除了之前的示例使用代码

================
File: frontend/.gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

================
File: frontend/package.json
================
{
  "name": "frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "autoprefixer": "^10.4.20",
    "axios": "^1.7.7",
    "postcss": "^8.4.47",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-scripts": "5.0.1",
    "tailwindcss": "^3.4.13",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

================
File: frontend/public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

================
File: frontend/public/manifest.json
================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: frontend/public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

================
File: frontend/README.md
================
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

================
File: frontend/src/App.css
================
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

================
File: frontend/src/App.js
================
import React, { useState } from 'react';
import axios from 'axios';

function App() {
  const [file, setFile] = useState(null);
  const [textModel, setTextModel] = useState('gpt-4o-mini');
  const [audioModel, setAudioModel] = useState('tts-1');
  const [speaker1Voice, setSpeaker1Voice] = useState('alloy');
  const [speaker2Voice, setSpeaker2Voice] = useState('echo');
  const [useFishAudio, setUseFishAudio] = useState(false);
  const [fishSpeaker1, setFishSpeaker1] = useState('zhou');
  const [fishSpeaker2, setFishSpeaker2] = useState('dong');
  const [transcript, setTranscript] = useState('');
  const [audioFile, setAudioFile] = useState('');
  const [status, setStatus] = useState('');
  const [uploadStatus, setUploadStatus] = useState('');
  const [progress, setProgress] = useState(0);

  const handleFileChange = (event) => {
    setFile(event.target.files[0]);
    setUploadStatus('文件已选择：' + event.target.files[0].name);
  };

  const handleSubmit = async (event) => {
    event.preventDefault();
    setStatus('正在处理...');
    setProgress(0);

    const formData = new FormData();
    formData.append('file', file);
    formData.append('text_model', textModel);
    formData.append('audio_model', audioModel);
    formData.append('speaker_1_voice', speaker1Voice);
    formData.append('speaker_2_voice', speaker2Voice);
    formData.append('use_fish_audio', useFishAudio);
    formData.append('fish_speaker_1', fishSpeaker1);
    formData.append('fish_speaker_2', fishSpeaker2);

    try {
      const response = await axios.post('http://localhost:5000/api/convert', formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
        onUploadProgress: (progressEvent) => {
          const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);
          setProgress(percentCompleted);
        }
      });
      setTranscript(response.data.transcript);
      setAudioFile(response.data.audio_file);
      setStatus('转换完成');
    } catch (error) {
      setStatus('转换失败: ' + (error.response?.data?.error || error.message));
      console.error('Error details:', error.response?.data?.traceback || error);
    }
  };

  return (
    <div className="min-h-screen bg-durian-light">
      <div className="container mx-auto px-4 py-8 max-w-3xl">
        <h1 className="text-5xl font-bold text-center mb-12 text-durian-accent drop-shadow-lg hover:scale-105 transition-transform duration-300">榴莲猫播客</h1>
        <form onSubmit={handleSubmit} className="space-y-6 bg-durian-medium p-8 rounded-lg shadow-lg hover:shadow-2xl transition-shadow duration-300">
          <div>
            <label htmlFor="file-upload" className="block text-lg font-medium mb-2 text-durian-accent">
              上传PDF文件：
            </label>
            <input
              id="file-upload"
              type="file"
              onChange={handleFileChange}
              accept=".pdf"
              required
              className="w-full px-4 py-3 border-2 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-opacity-50 focus:border-durian-accent transition-all duration-300 hover:border-durian-accent"
              style={{ borderColor: '#FFBB70' }}
            />
            {uploadStatus && <p className="mt-2 text-sm text-durian-accent">{uploadStatus}</p>}
          </div>
          
          <div>
            <label htmlFor="text-model" className="block text-sm font-medium text-gray-700 mb-2">
              选择文本生成模型：
            </label>
            <select
              id="text-model"
              value={textModel}
              onChange={(e) => setTextModel(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            >
              <option value="gpt-4o-mini">gpt-4o-mini</option>
              <option value="gpt-4o">gpt-4o</option>
              <option value="o1-preview">o1-preview</option>
              <option value="o1-mini">o1-mini</option>
            </select>
          </div>

          <div>
            <label htmlFor="audio-model" className="block text-sm font-medium text-gray-700 mb-2">
              选择音频生成模型：
            </label>
            <select
              id="audio-model"
              value={audioModel}
              onChange={(e) => setAudioModel(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            >
              <option value="tts-1">tts-1</option>
              <option value="tts-1-hd">tts-1-hd</option>
            </select>
          </div>

          <div className="flex items-center">
            <input
              id="use-fish-audio"
              type="checkbox"
              checked={useFishAudio}
              onChange={(e) => setUseFishAudio(e.target.checked)}
              className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            />
            <label htmlFor="use-fish-audio" className="ml-2 block text-sm text-gray-900">
              使用Fish Audio API
            </label>
          </div>

          {!useFishAudio && (
            <>
              <div>
                <label htmlFor="speaker1-voice" className="block text-sm font-medium text-gray-700 mb-2">
                  选择说话者1的声音：
                </label>
                <select
                  id="speaker1-voice"
                  value={speaker1Voice}
                  onChange={(e) => setSpeaker1Voice(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="alloy">alloy</option>
                  <option value="echo">echo</option>
                  <option value="fable">fable</option>
                  <option value="onyx">onyx</option>
                  <option value="nova">nova</option>
                  <option value="shimmer">shimmer</option>
                </select>
              </div>

              <div>
                <label htmlFor="speaker2-voice" className="block text-sm font-medium text-gray-700 mb-2">
                  选择说话者2的声音：
                </label>
                <select
                  id="speaker2-voice"
                  value={speaker2Voice}
                  onChange={(e) => setSpeaker2Voice(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="alloy">alloy</option>
                  <option value="echo">echo</option>
                  <option value="fable">fable</option>
                  <option value="onyx">onyx</option>
                  <option value="nova">nova</option>
                  <option value="shimmer">shimmer</option>
                </select>
              </div>
            </>
          )}

          {useFishAudio && (
            <>
              <div>
                <label htmlFor="fish-speaker1" className="block text-sm font-medium text-gray-700 mb-2">
                  选择说话者1的声音（Fish Audio）：
                </label>
                <select
                  id="fish-speaker1"
                  value={fishSpeaker1}
                  onChange={(e) => setFishSpeaker1(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="zhou">周（Zhou）</option>
                  <option value="dong">东（Dong）</option>
                  <option value="xing">星（Xing）</option>
                  <option value="yang">杨（Yang）</option>
                  <option value="新种子名">新种子的显示名称</option>  {/* 在这里添加新的选项 */}
                </select>
              </div>

              <div>
                <label htmlFor="fish-speaker2" className="block text-sm font-medium text-gray-700 mb-2">
                  选择说话者2的声音（Fish Audio）：
                </label>
                <select
                  id="fish-speaker2"
                  value={fishSpeaker2}
                  onChange={(e) => setFishSpeaker2(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="zhou">周（Zhou）</option>
                  <option value="dong">东（Dong）</option>
                  <option value="xing">星（Xing）</option>
                  <option value="yang">杨（Yang）</option>
                  <option value="新种子名">新种子的显示名称</option>  {/* 在这里也添加新的选项 */}
                </select>
              </div>
            </>
          )}

          <button
            type="submit"
            className="w-full px-6 py-3 font-semibold rounded-md shadow-md text-white bg-durian-accent hover:bg-durian-dark hover:scale-105 transition-all duration-300"
          >
            转换PDF
          </button>
        </form>

        <div className="mt-6 text-center font-semibold">{status}</div>
        {progress > 0 && progress < 100 && (
          <div className="mt-4">
            <div className="w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700">
              <div className="bg-blue-600 h-2.5 rounded-full" style={{width: `${progress}%`}}></div>
            </div>
            <p className="text-center mt-2">{progress}% 完成</p>
          </div>
        )}

        {transcript && (
          <div className="mt-12 bg-durian-medium p-8 rounded-lg shadow-lg hover:shadow-2xl transition-all duration-300">
            <h2 className="text-2xl font-semibold mb-4 text-durian-accent">生成的文本记录：</h2>
            <textarea
              value={transcript}
              readOnly
              rows="10"
              className="w-full px-4 py-3 border-2 rounded-md shadow-inner focus:outline-none focus:ring-2 focus:ring-opacity-50 transition-all duration-300"
              style={{ borderColor: '#FFBB70', backgroundColor: '#FFFBDA', color: '#ED9455' }}
            />
          </div>
        )}

        {audioFile && (
          <div className="mt-12 bg-durian-medium p-8 rounded-lg shadow-lg hover:shadow-2xl transition-all duration-300">
            <h2 className="text-2xl font-semibold mb-4 text-durian-accent">生成的音频：</h2>
            <audio
              controls
              src={`http://localhost:5000/api/download?file=${audioFile}`}
              className="w-full mb-4"
            />
            <a
              href={`http://localhost:5000/api/download?file=${audioFile}`}
              download
              className="inline-block px-6 py-3 text-white font-semibold rounded-md shadow-md bg-durian-accent hover:bg-durian-dark hover:scale-105 transition-all duration-300"
            >
              下载音频文件
            </a>
          </div>
        )}
      </div>
    </div>
  );
}

export default App;

================
File: frontend/src/App.test.js
================
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

================
File: frontend/src/index.css
================
@import 'tailwindcss/base';
@import 'tailwindcss/components';
@import 'tailwindcss/utilities';

/* 您可以在这里添加任何自定义的全局样式 */

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

================
File: frontend/src/index.js
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

================
File: frontend/src/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

================
File: frontend/src/reportWebVitals.js
================
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

================
File: frontend/src/setupTests.js
================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

================
File: frontend/tailwind.config.js
================
module.exports = {
    content: [
      "./src/**/*.{js,jsx,ts,tsx}",
    ],
    theme: {
      extend: {
        colors: {
          'durian-light': '#FFFBDA',
          'durian-medium': '#FFEC9E',
          'durian-dark': '#FFBB70',
          'durian-accent': '#ED9455',
        },
        boxShadow: {
          'inner': 'inset 0 2px 4px 0 rgba(0, 0, 0, 0.06)',
        },
        scale: {
          '105': '1.05',
        },
      },
    },
    plugins: [],
  }

================
File: readme
================
# 榴莲猫播客生成器

榴莲猫播客生成器是一个基于 AI 的工具,可以将 PDF 文档转换为播客形式的音频内容。

该项目使用 React 构建前端界面,Flask 作为后端服务,并集成了 OpenAI 和 Fish Audio 的 API 来生成对话和语音。

## 功能特点

- 上传 PDF 文件并转换为播客对话
- 支持 OpenAI 和 Fish Audio 两种音频生成方式
- 可自定义说话者声音
- 生成文本记录和音频文件
- 支持音频预览和下载

## 技术栈

- 前端: React, Tailwind CSS
- 后端: Flask, Python
- API: OpenAI, Fish Audio

## 安装和运行

### 前端

1. 进入 `client` 目录
2. 安装依赖: `npm install`
3. 运行开发服务器: `npm start`

### 后端

1. 进入 `backend` 目录
2. 创建虚拟环境: `python -m venv venv`
3. 激活虚拟环境:
   - Windows: `venv\Scripts\activate`
   - macOS/Linux: `source venv/bin/activate`
4. 安装依赖: `pip install -r requirements.txt`
5. 设置环境变量:
   - 创建 `.env` 文件并添加以下内容:
     ```
     OPENAI_API_KEY=your_openai_api_key
     FISH_AUDIO_API_KEY=your_fish_audio_api_key
     ```
6. 运行 Flask 服务器: `python app.py`

## 使用说明

1. 打开浏览器访问 `http://localhost:3000`
2. 上传 PDF 文件
3. 选择文本生成模型和音频生成选项
4. 点击"转换 PDF"按钮
5. 等待转换完成
6. 查看生成的文本记录和音频文件
7. 可以预览或下载生成的音频

## 文件结构

- `client/`: 前端 React 应用
  - `src/App.js`: 主要的 React 组件
  - `src/index.css`: 全局样式文件
- `backend/`: 后端 Flask 应用
  - `app.py`: 主要的 Flask 应用文件
  - `fishaudio/`: Fish Audio API 相关功能

## 注意事项

- 确保已正确设置 OpenAI 和 Fish Audio 的 API 密钥
- 转换大文件可能需要较长时间,请耐心等待
- 使用 Fish Audio API 需要额外的配置和权限

================
File: repopack.config.json
================
{
    "ignore": {
      "useGitignore": true,
      "useDefaultPatterns": true,
      "customPatterns": [
        "node_modules/**",
        "**/package-lock.json",
        "**/.git/**",
        "**/repopack-output.txt"
      ]
    },
    "output": {
      "filePath": "repopack-output.txt",
      "style": "plain",
      "topFilesLength": 10
    }
  }

================
File: requirement.txt
================
根据项目的代码和结构，我可以为您列出需要安装的依赖。这些依赖分为前端（client）和后端（backend）两部分。

前端依赖：

npm install react react-dom axios tailwindcss@latest postcss@latest autoprefixer@latest

后端依赖：

pip install flask flask-cors openai python-dotenv loguru pydantic pypdf tenacity requests

这些依赖包括：

前端：

React 和 ReactDOM：用于构建用户界面
Axios：用于发送HTTP请求
Tailwind CSS：用于快速构建自定义设计


后端：

Flask 和 Flask-CORS：用于创建Web应用和处理跨域请求
OpenAI：用于与OpenAI API交互
python-dotenv：用于加载环境变量
Loguru：用于日志记录
Pydantic：用于数据验证
PyPDF：用于处理PDF文件
Tenacity：用于重试机制
Requests：用于发送HTTP请求（用于Fish Audio API）
